.. contents::
   :depth: 3
..

Docker三剑客之-Compose
======================

Docker Compose 是 Docker
官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。

简介
----

Compose 项目目前在 `Github <https://github.com/docker/compose>`__
上进行维护，目前最新版本是 1.25.。

Compose 定位是“defining and running complex applications with
Docker”，前身是 Fig，兼容 Fig 的模板文件。

Dockerfile 可以让用户管理一个单独的应用容器；而 Compose
则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个
project，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。

该项目由 Python 编写，实际上调用了 Docker 提供的 API 来实现。

安装
----

安装 Compose 之前，要先安装 Docker，在此不再赘述。

PIP 安装
~~~~~~~~

这种方式最为推荐。

执行命令。

::

   $ sudo pip install -U docker-compose

安装成功后，可以查看 docker-compose 命令的用法。

::

   $ docker-compose -h
   Fast, isolated development environments using Docker.

   Usage:
     docker-compose [options] [COMMAND] [ARGS...]
     docker-compose -h|--help

   Options:
     --verbose                 Show more output
     --version                 Print version and exit
     -f, --file FILE           Specify an alternate compose file (default: docker-compose.yml)
     -p, --project-name NAME   Specify an alternate project name (default: directory name)

   Commands:
     build     Build or rebuild services
     help      Get help on a command
     kill      Kill containers
     logs      View output from containers
     port      Print the public port for a port binding
     ps        List containers
     pull      Pulls service images
     rm        Remove stopped containers
     run       Run a one-off command
     scale     Set number of containers for a service
     start     Start services
     stop      Stop services
     restart   Restart services
     up        Create and start containers

之后，可以添加 bash 补全命令。

::

   $ curl -L https://raw.githubusercontent.com/docker/compose/1.2.0/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose

二进制包
--------

发布的二进制包可以在 ``https://github.com/docker/compose/releases``
找到。

下载后直接放到执行路径即可。

例如，在常见的 Linux 平台上。

::

    $ sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    $ sudo chmod a+x /usr/local/bin/docker-compose

创建软链：

::

   $ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

测试是否安装成功：

::

   $ docker-compose --version
   cker-compose version 1.24.1, build 4667896b

使用
----

术语

首先介绍几个术语。

-  服务（service）：一个应用容器，实际上可以运行多个相同镜像的实例。

-  项目(project)：由一组关联的应用容器组成的一个完整业务单元。

可见，一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理。

场景 下面，我们创建一个经典的 Web 项目：一个 Haproxy，挂载三个 Web
容器。 创建一个 compose-haproxy-web
目录，作为项目工作目录，并在其中分别创建两个子目录：haproxy 和 web。

Web 子目录

这里用 Python 程序来提供一个简单的 HTTP 服务，打印出访问者的 IP 和
实际的本地 IP。

compose-haproxy-web 目录长成下面的样子。

::

   compose-haproxy-web
   ├── docker-compose.yml
   ├── haproxy
   │   └── haproxy.cfg
   └── web
       ├── Dockerfile
       ├── index.html
       └── index.py

``index.py``

编写一个 ``index.py`` 作为服务器文件，代码为

::

   #!/usr/bin/python
   #authors: yeasy.github.com
   #date: 2013-07-05

   import sys
   import BaseHTTPServer
   from SimpleHTTPServer import SimpleHTTPRequestHandler
   import socket
   import fcntl
   import struct
   import pickle
   from datetime import datetime
   from collections import OrderedDict

   class HandlerClass(SimpleHTTPRequestHandler):
       def get_ip_address(self,ifname):
           s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
           return socket.inet_ntoa(fcntl.ioctl(
               s.fileno(),
               0x8915,  # SIOCGIFADDR
               struct.pack('256s', ifname[:15])
           )[20:24])
       def log_message(self, format, *args):
           if len(args) < 3 or "200" not in args[1]:
               return
           try:
               request = pickle.load(open("pickle_data.txt","r"))
           except:
               request=OrderedDict()
           time_now = datetime.now()
           ts = time_now.strftime('%Y-%m-%d %H:%M:%S')
           server = self.get_ip_address('eth0')
           host=self.address_string()
           addr_pair = (host,server)
           if addr_pair not in request:
               request[addr_pair]=[1,ts]
           else:
               num = request[addr_pair][0]+1
               del request[addr_pair]
               request[addr_pair]=[num,ts]
           file=open("index.html", "w")
           file.write("<!DOCTYPE html> <html> <body><center><h1><font color=\"blue\" face=\"Georgia, Arial\" size=8><em>HA</em></font> Webpage Visit Results</h1></center>");
           for pair in request:
               if pair[0] == host:
                   guest = "LOCAL: "+pair[0]
               else:
                   guest = pair[0]
               if (time_now-datetime.strptime(request[pair][1],'%Y-%m-%d %H:%M:%S')).seconds < 3:
                   file.write("<p style=\"font-size:150%\" >#"+ str(request[pair][1]) +": <font color=\"red\">"+str(request[pair][0])+ "</font> requests " + "from &lt<font color=\"blue\">"+guest+"</font>&gt to WebServer &lt<font color=\"blue\">"+pair[1]+"</font>&gt</p>")
               else:
                   file.write("<p style=\"font-size:150%\" >#"+ str(request[pair][1]) +": <font color=\"maroon\">"+str(request[pair][0])+ "</font> requests " + "from &lt<font color=\"navy\">"+guest+"</font>&gt to WebServer &lt<font color=\"navy\">"+pair[1]+"</font>&gt</p>")
           file.write("</body> </html>");
           file.close()
           pickle.dump(request,open("pickle_data.txt","w"))

   if __name__ == '__main__':
       try:
           ServerClass  = BaseHTTPServer.HTTPServer
           Protocol     = "HTTP/1.0"
           addr = len(sys.argv) < 2 and "0.0.0.0" or sys.argv[1]
           port = len(sys.argv) < 3 and 80 or int(sys.argv[2])
           HandlerClass.protocol_version = Protocol
           httpd = ServerClass((addr, port), HandlerClass)
           sa = httpd.socket.getsockname()
           print "Serving HTTP on", sa[0], "port", sa[1], "..."
           httpd.serve_forever()
       except:
           exit()

index.html

生成一个临时的 ``index.html`` 文件，其内容会被 index.py 更新。

::

   $ touch index.html

Dockerfile 生成一个 Dockerfile，内容为

::

   FROM python:2.7
   WORKDIR /code
   ADD . /code
   EXPOSE 80
   CMD python index.py

Docker快速搭建一套PHP、Nginx、MySQL、Redis、Xdebug、Memcached
开发环境并演进

https://www.ctolib.com/topics-141386.html

https://www.cnblogs.com/flgb/p/12184997.html

参考资料
--------

`docker-compose
使用 <https://blog.csdn.net/luanpeng825485697/article/details/102620131>`__

https://docs.docker.com/compose/install/

相关博客

https://github.com/PI-KA-CHU/PIKACHU-JAVA-Notebook/issues/76

https://www.runoob.com/docker/docker-compose.html

docker-compose.yml 配置文件编写详解

https://blog.csdn.net/qq_36148847/article/details/79427878
