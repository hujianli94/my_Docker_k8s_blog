.. contents::
   :depth: 3
..

附录
====

附录A　常见问题总结
-------------------

镜像相关
~~~~~~~~

1.如何备份系统中的所有镜像
^^^^^^^^^^^^^^^^^^^^^^^^^^

``backup_image.sh``

::

   #!/usr/bin/env bash
   #usage:xxx
   #scripts_name:${NAME}.sh
   # author：xiaojian

   # 备份镜像列表
   docker images |awk 'NR>1{print $1":"$2}'|sort > images.list

   # 导出所有镜像为当前目录下文件
   while read img; do
       echo $img
       file="${img//\//-}"
       sudo docker save $img > $file.tar
   done < images.list

将本地镜像导入为docker镜像

::

   #!/usr/bin/env bash
   #usage:xxx
   #scripts_name:${NAME}.sh
   # author：xiaojian
   while read img; do
       echo $img
       file="${img//\//-}"
       sudo docker load < $file.tar
   done < images.list

2.如何批量清理临时镜像文件？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

使用如下命令

::

   docker rmi $(docker images -q -f dangling=true) 


   # 查看状态是关闭的镜像
   docker ps -a --filter status=exited 

3.如何删除所有本地的镜像？
^^^^^^^^^^^^^^^^^^^^^^^^^^

使用如下命令

::

   dokcer rmi -f $(docker images -q)

删除所有未运行 Docker 容器

::

   docker rm $(docker ps -a -q)

   # 删除none的镜像，要先删除镜像中的容器。要删除镜像中的容器，必须先停止容器
   docker stop $(docker ps -a | grep "Exited" | awk '{print $1 }')         //停止容器
   docker rm $(docker ps -a | grep "Exited" | awk '{print $1 }')           //删除容器
   docker rmi $(docker images | grep "none" | awk '{print $3}')            //删除镜像


   # docker 删除所有none的镜像
   docker images|grep none|awk '{print $3}'|xargs docker rmi

删除所有未打 tag 的镜像

::

   docker rmi $(docker images -q | awk '/^<none>/ { print $3 }')

4.如何清理Docker系统中的无用数据
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

如下命令会自动清理处于停止状态的容器、无用的网络和挂载卷、临时镜像和创建镜像缓存。

::

   docker system prune --volumes -f

5.如何查看镜像内的环境变量？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

使用如下命令

::

   docker run IMAGE env

6.本地的镜像文件都存放在哪里？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

与Docker相关的本地资源（包括镜像、容器）默认存放在/var/lib/docker/
目录下。
以aufs文件系统为例，其中container目录存放容器信息，graph目录存放镜像信息，aufs目录下存放具体的镜像层文件。

7. 构建Docker镜像应该遵循哪些原则？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

整体原则上,尽量保持镜像功能的明确和内容的精简,避免添加额外文件和操作步骤,要点包括：

::

   囗 尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择debian:wheezy 或debian:jessie 镜像，仅有不足百兆大小
   囗 清理编译生成文件、安装包的缓存等临时文件；
   囗 安装各个软件时候要指定准确的版本号,并避免引人不需要的依赖；
   囗 从安全角度考虑,应用要尽量使用系统的库和依赖；
   囗 如果安装应用时候需要配置一些特殊的环境变量,在安装后要还原不需要保持的变量值；
   囗 使用Dockerfile创建镜像时候要添加.dockerignore 文件或使用干净的工作目录；
   囗 区分编译环境容器和运行时环境容器,使用多阶段镜像创建。

8.碰到网络问题，无法pull镜像，命令行指定http_proxy无效，如何处理？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   在Docker配置文件中添加export http_proxy="http://<PROXY_HOST>:<PROXY_PORT>"，之后重启Docker服务即可。

9.批量将本地所有kubernetes镜像上传到阿里云
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``pull_all.sh``

::

   [root@k8s-master push_images_k8s]# cat pull_all.sh
   #!/usr/bin/env bash
   #usage:xxx
   #scripts_name:${NAME}.sh
   # author：xiaojian
   PWD=$(pwd)
   for image in `docker images|grep -v "REPOSITORY"|grep -v "<none>"|awk '{print $1":"$2}'` ; do
       img=${image##*/}
       bash ${PWD}/push_image.sh $image
       #echo  "${PWD}/push_image.sh $image"
   done

``push_image.sh``

::

   [root@k8s-master push_images_k8s]# cat push_image.sh
   #!/usr/bin/env bash
   #usage:xxx
   #scripts_name:${NAME}.sh
   # author：xiaojian

   #This script is used to upload many images to local or private repositories

   # Usage: push_images image1 [image2...]

   # 这里是阿里云镜像仓库地址
   registry=registry.cn-hangzhou.aliyuncs.com/hu_k8s

   echo_r() {
       [ $# -ne 1 ] && return 0
       echo -e "\033[31m$1\033[0m"
   }

   echo_g() {
       [ $# -ne 1 ] && return 0
       echo -e "\033[32m$1\033[0m"
   }

   echo_y() {
       [ $# -ne 1 ] && return 0
       echo -e "\033[33m$1\033[0m"
   }
   echo_b() {
       [ $# -ne 1 ] && return 0
       echo -e "\033[34m$1\033[0m"
   }

   usage() {
       docker images
       echo "Usage: $0 registry:tag1 [registry2:tag2...]"
   }

   [ $# -lt 1 ] && usage && exit
   echo_b "The registry server is $registry"

   for image in "$@" ; do
       img=${image##*/}
       echo_b "Uploading $img"
       docker tag $image $registry/$img
       docker push $registry/$img
       docker rmi $registry/$img
       sleep 1
       echo_g "Done"
   done

10.批量导入导出Docker镜像
^^^^^^^^^^^^^^^^^^^^^^^^^

docker导出

::

   docker save -o centos-binary-neutron-server-2.0.0.5.tar.gz  kollaglue/centos-binary-neutron-server:2.0.0.5

docker导入

::

   docker load < centos-binary-neutron-server-2.0.0.5.tar.gz

docker导出镜像

.. code:: shell

   #!/bin/bash
   IMAGES_LIST=($(docker images|sed '1d'|awk '{print $1}'))
   IMAGES_NM_LIST=($(docker images|sed '1d'|awk '{print $1"-"$2}'|awk -F/ '{print $NF}'))
   IMAGES_NUM=${#IMAGES_LIST[*]}
   for((i=0;i<$IMAGES_NUM;i++))
   do
       docker save "${IMAGES_LIST[$i]}"  -o "${IMAGES_NM_LIST[$i]}".tar.gz 
       echo $i ${IMAGES_NM_LIST[$i]} is ok
   done

docker导入镜像

.. code:: shell

   #!/bin/bash
   for image_name in $(ls ./*.tar.gz)
   do
       docker load < ${image_name}
   done 

11 批量删除指定 repository 所有镜像工具
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: shell

   #!/bin/sh
   # Writed by yijian on 2020/8/31
   # 批量删除指定 repository 所有镜像工具
   # 运行时需要指定一个参数：
   # 1）参数1：必选参数，repository 名，即“docker images”的第一列值

   function usage()
   {
     echo "Remove all images with the given repository."
     echo "Usage: `basename $0` repository"
     echo "Example1: `basename $0` \"<none>\""
     echo "Example2: `basename $0` \"redis\""
   }

   # 参数检查
   if test $# -ne 1; then
     usage
     exit 1
   fi

   repository="$1"
   images=(`docker images|awk -v repository=$repository '{ if ($1==repository) print $3 }'`)
   for ((i=0; i<${#images[@]}; ++i))
   do
     image="${images[$i]}"
     echo "[$i] docker rmi \"$image\""
     docker rmi "$image"
   done

容器相关
~~~~~~~~

1.容器退出后，通过docker ps 命令查看不到，数据会丢失么？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

容器退出后会处于终止(exited)状态，此时可以通过docker ps
-a查看。其中的数据也不会丢失，还可以通过
``docker [container] start``\ 命令来启动它。

只有删除掉容器才会清除所有数据。

2.如何停止所有正在运行的容器
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   可以使用 docker [container] stop $(docker ps -q) 命令

3.如何批量清理所有的容器，包括处于运行状态和停止状态的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   可以使用 docker [container] rm -f $(docker ps -qa) 命令

4.如何获取某个容器的PID信息
^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   可以使用 docker [container] inspect --format '{{ .State.Pid }}' <CONTAINER ID or NAME> 命令。

5.如何获取某个容器的IP地址？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   可以使用 docker [container] inspect --format '{{ .NetworkSettings.IPAddress }}' <CONTAINER ID or NAME> 命令。

6.如何清理 Docker 占用的磁盘空间
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

https://zhuanlan.zhihu.com/p/100793598

迁移/var/lib/docker目录

https://blog.csdn.net/weixin_32820767/article/details/81196250

7.给运行中的docker容器添加端口映射
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.获取容器IP

.. code:: shell

   $ docker inspect <container_id> | grep IPAddress

2.通过iptable转发端口，并做映射

.. code:: shell

   $ iptables -t nat -A DOCKER -p tcp --dport 50000 -j DNAT --to-destination 172.17.0.3:50000

3.重启容器

.. code:: shell

   $ docker restart <container_id>
